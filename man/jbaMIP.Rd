% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JaBbA.R
\name{jbaMIP}
\alias{jbaMIP}
\title{jbaMIP}
\usage{
jbaMIP(adj, segstats, beta = NA, gamma = NA, field.ncn = "ncn",
  tilim = 20, mipemphasis = 0, epgap = 0.01, ploidy.min = 0.1,
  ploidy.max = 20, beta.guess = beta, beta.min = beta.guess,
  beta.max = beta.guess, gamma.guess = NA, gamma.min = gamma.guess,
  gamma.max = gamma.guess, cn.sd = 1, cn.prior = cn.sd, partition = T,
  purity.prior.mean = NA, purity.prior.sd = 0.3,
  purity.prior.strength = 1, purity.prior = c(purity.prior.mean,
  purity.prior.sd), cn.fix = rep(NA, length(segstats)), cn.lb = cn.fix,
  cn.ub = cn.fix, loose.ends = c(), adj.lb = 0 * adj, adj.nudge = 0 *
  adj, ecn.out.ub = rep(NA, length(segstats)), ecn.in.ub = rep(NA,
  length(segstats)), gurobi = F, nsolutions = 1, verbose = F, debug = F,
  mc.cores = 1, ignore.edge = FALSE, ignore.cons = TRUE,
  edge.slack = TRUE, slack.prior = 1, ...)
}
\arguments{
\item{adj}{n x n adjacency matrix interpreted as binary (this is the $adj output of karyograph)}

\item{segstats}{n x 1 GRanges object with "mean" and "sd" value fields}

\item{beta}{numeric guess for beta (i.e. from ppgrid)}

\item{gamma}{numeric guess for gamma (i.e. from ppgrid)}

\item{field.ncn}{this field takes into account normal copy number in relative to absolute conversion}

\item{adj.lb}{nxn matrix of lower bounds on particular copy numbers - this is used to force certain junctions into the graph}

\item{adj.nudge}{nxn adjacency matrix of "nudge" rewards on individual junctions, NOTE: maximum value in this matrix}

\item{slack.prior}{1/slack.prior = penalty for each additional copy number of each slack edge, the higher slack.prior the more slack we allow in the reconstruction, should be intuitively calibrated to the expected "incompleteness" of the reconstruction, 1/slack.prior should be calibrated with respect to 1/(k*sd)^2 for each segment, so that we are comfortable with junction balance constraints introducing k copy number deviation from a segments MLE copy number assignment (the assignment in the absence of junction balance constraints)}
}
\value{
output is a Rcplex solution or list of Rcplex solution with additional fields, each Rcplex solution is a list and the additional fields
added by jbaMIP are
$adj input n x n adjacency matrix populated with integer copy numbers
$segstats input segstats vector populated with meta data fields $cn, $ecn.in, $ecn.out, $edges.out, $eslack.in, $eslack.out
$purity purity value associated with relative-absolute affine copy number conversion for this solution
$ploidy purity value associated with relative-absolute affine copy number conversion for this solution
$


Additional fields for qc / technical debugging:
$nll.cn negative log likelihood corresponding to the CN fit in this solution
$nll.opt negative log likelihood correpsonding to the MLE CN without junction constraints
$residual = value of residual between copy solution and MLE fit without junction constraints
$beta beta value associated with relative-absolute affine copy number conversion for this solution
$gamma gamma value associated with relative-absolute affine copy number conversion for this solution
$gap.cn total gap between MLE fit without junction constraints and JaBbA fit
$ploidy.constraints input ploidy constraints
$beta.constraints input beta constrinats
$cn.prior input cn.prior
$slack.prior input slack.prior
}
\description{
jbaMIP
}
\details{
primary "heavy" lifting task of JaBbA.  Sets up optimization problem given an input graph and segstats input
and sends to CPLEX via RCplex

combines edge-conservation constraints from karyograph (n x n adjacency matrix connecting n genomic intervals) with segment abundance data
(segstats - length n GRanges object with mean and sd fields corresponding to posterior means and sd's on the
the relative "concentration" of each interval) to infer

(1) interval and edge absolute copy numbers on the karyograph
(2) purity and ploidy
(3) slack edges (if any needed)

basically solves ABSOLUTE problem (fitting integer grid to continuous segment intensities)
while enforcing edge-conservation constraints. 

Most important optional parameters include
(1) cn.sd (expected deviation of absolute copy number from ploidy)
(2) ploidy.min and ploidy.max --> useful for probing alternate solutions, but can be generously set
(3) adj.lb --> enforces minimal edge absolute copy number, eg to force aberrant adjacency use
(4) edge.slack - logical variable to determine whether or not to allow penalized relaxation of edge conservation constraints
(5) nsolutions - number of alternate solutions
}
