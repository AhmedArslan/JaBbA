#!/usr/bin/env Rscript
library(optparse)
jbastr = "
 _____         ___    _      _____ 
(___  )       (  _`\\ ( )    (  _  )
    | |   _ _ | (_) )| |_   | (_) |
 _  | | /'_` )|  _ <'| '_`\\ |  _  |
( )_| |( (_| || (_) )| |_) )| | | |
`\\___/'`\\__,_)(____/'(_,__/'(_) (_)

(Junction     Balance     Analysis)\n"

if (!exists("opt"))
{
    option_list = list(
        make_option(c("-s", "--seg"),
                    type = "character",
                    help = "Path to .rds file of GRanges object of intervals corresponding to initial segmentation (required)"),
        make_option(c("-a", "--abu"),
                    type = "character",
                    help = "Path to .rds, file of GRanges object of fine scale genomic coverage / abundance as tiled intervals (100 - 5000 bp) along genome (required)"),
        make_option(c("-r", "--ra"),
                    type = "character",
                    help = "Path to rearrangement file, which can be VCF breakend format, dRanger tab delim output,  or an rds of GRangesList of signed locus pairs pointing AWAY from junction (required)"),
        make_option(c("-j", "--cfield"),
                    type = "character",
                    help = "Name of meta data field of ra GRanges or data frame that specifies a junction confidence score, this will be used as a score to nudge (ie reward) each copy of that junction in the optimization"),
        make_option(c("-i", "--tfield"),
                    type = "character",
                    help = "Name of meta data field of ra GRanges or data frame that specifies tiers of junctions, where tier 1 is forced to be included"),
        make_option(c("-b", "--nseg"),
                    type = "character",
                    default = "",
                    help = "Path to .rds file of GRanges object of intervals corresponding to normal tissue copy number, needs to have $cn field"),
        make_option(c("-d", "--hets"),
                    type = "character",
                    default = "",
                    help = "Path to tab delimited hets file output of pileup with fields seqnames, start, end, alt.count.t, ref.count.t, alt.count.n, ref.count.n"),
        make_option(c("-l", "--libdir"),
                    type = "character",
                    default = paste(Sys.getenv("GIT_HOME"), "isva", sep = "/"),
                    help = "Directory containing karyoMIP.R file (eg default GIT.HOME/isva)"),
        make_option(c("-o", "--outdir"),
                    type = "character",
                    default = "./",
                    help = "Directory to dump output into"),
        make_option(c("-n", "--name"),
                    type = "character",
                    default = "tumor",
                    help = "Sample / Individual name"),
        make_option(c("-f", "--field"),
                    type = "character",
                    default = "ratio",
                    help = "Name of meta data field or column to use for abundance / coverage signal from abundance / coverage soignal file"),
        make_option(c("-k", "--slack"),
                    type = "numeric",
                    default = 1000,
                    help = "Slack penalty to apply per loose end copy"),
        make_option(c("-z", "--subsample"),
                    type = "numeric",
                    default = 1,
                    help = "Numeric value between 0 and 1 specifying whether to subsample coverage for intra segment variance estimation"),
        make_option(c("-t", "--tilim"),
                    type = "integer",
                    default = 3600,
                    help = "Time limit for JaBbA MIP"),
        make_option(c("-p", "--ploidy"),
                    type = "character",
                    default = NA,
                    help = "Ploidy guess"),
        make_option(c("-q", "--purity"),
                    type = "character",
                    default = NA,
                    help = "Purity guess"),
        make_option(c("-c", "--cores"),
                    type = "integer",
                    default = 1,
                    help = "Number of cores for JaBBa MIP"),
        make_option(c("-m", "--iterate"),
                    type = "integer",
                    default = 0,
                    help = "How many times to iterate through tiers"),
        make_option(c("-w", "--window"),
                    type = "numeric",
                    default = 1e4,
                    help = "Window to dumpster dive for junctions around loose ends"),
        make_option(c("-e", "--edgenudge"),
                    type = "numeric",
                    default = 0.1,
                    help = "Edge nudge for optimization, to be multiplied by edge specific confidence score if provided"),
        make_option(c("--ppmethod"),
                    type = "character",
                    default = "sequenza",
                    help = "choose from sequenza, ppurple, or ppgrid to estimate purity ploidy"),
        make_option(c("--indel"),
                    action = "store_true",
                    default = FALSE,
                    help = "if TRUE will force the small isolated junctions in tier 2 have non-zero copy numbers"),
        make_option(c("--allin"),
                    action = "store_true",
                    default = FALSE,
                    help = "if TRUE will put all tiers in the first round of iteration"),
        make_option(c("--boolean"),
                    action = "store_true",
                    default = FALSE,
                    help = "if TRUE will use Boolean loose end penalty"),
        make_option(c("--epgap"),
                    type="numeric",
                    default = 0.01,
                    help = "threshold for calling convergence"),
        make_option(c("-x", "--strict"),
                    type = 'character',
                    default = "FALSE",
                    help = "if TRUE will restrict input junctions to only the subset overlapping seg"),
        make_option(c("-u", "--gurobi"),
                    type = 'character',
                    default = 'FALSE',
                    help = "if TRUE will use gurobi (gurobi R package must be installed) and if FALSE will use CPLEX (cplex must be installed prior to library installation)"),
        make_option(c("-v", "--verbose"),
                    action = "store_true",
                    default = FALSE,
                    help = "verbose output"),
        make_option(c("-y", "--nudgebalanced"),
                    action = "store_true",
                    default = TRUE,
                    help = "Manually nudge balanced junctions into the model.")
    )

    parseobj = OptionParser(usage = paste(c("jba [options] JUNCTIONS COVERAGE",
                                            "\tJUNCTIONS can be BND style vcf, bedpe, rds of GrangesList",
                                            " \tCOVERAGE is a .wig, .bw, .bedgraph, .bed., .rds of a granges, or .tsv  .csv /.txt  file that is coercible to a GRanges",
                                            "\tuse --field=FIELD argument so specify which column to use if specific meta field of a multi-column table"),
                                          collapse="\n"),
                                          option_list=option_list)

    args = tryCatch(parse_args(parseobj, positional_arguments= 2, print_help_and_exit = FALSE),
                    error = function(e) {message(jbastr); print_help(parseobj); NULL})


    opt = NULL;
    if (!is.null(args)) {
        opt = args$options
        opt$junctions = args$args[1]
        opt$coverage = args$args[2]
        if (!file.exists(opt$junctions))
        {
            message('Did not find junction file ', opt$junctions)
            print_help(parseobj); stop()
        }
        if (!file.exists(opt$coverage))
        {
            message('Did not find coverage file ', opt$coverage)
            print_help(parseobj); stop()
        }
    } else {
        stop("See usage.")
    }
}

suppressPackageStartupMessages(
{
    library(JaBbA)
    jmessage = function(..., pre = 'JaBbA'){
        message(pre, ' ', paste0(as.character(Sys.time()), ': '), ...)
    }
    message(jbastr)
    jmessage('Located junction file ', opt$junctions)
    jmessage('Located coverage file ', opt$coverage)
    jmessage('Loading packages ...')
    writeLines(paste(paste("--", names(opt), " ", sapply(opt, function(x) paste(x, collapse = ",")), sep = "", collapse = " "), sep = ""), paste(opt$outdir, "cmd.args", sep = "/"))
    saveRDS(opt, paste(opt$outdir, "cmd.args.rds", sep = "/"))
    jab = JaBbA(coverage = opt$coverage,
                junctions = opt$junctions,
                seg = opt$seg,
                cfield = opt$cfield,
                tfield = opt$tfield,
                nseg = opt$nseg,
                hets = opt$hets,
                outdir = opt$outdir,
                subsample = opt$subsample,
                name = opt$name,
                field = opt$field,
                slack = opt$slack,
                loose.penalty.mode = ifelse(opt$boolean, "boolean", "linear"),
                strict = as.logical(opt$strict),
                tilim = opt$tilim,
                ploidy = opt$ploidy,
                purity = opt$purity,
                pp.method = opt$ppmethod,
                verbose = 2,
                mc.cores = opt$cores,
                reiterate = opt$iterate,
                rescue.window = opt$window,
                edgenudge = opt$edgenudge,
                nudge.balanced = opt$nudgebalanced,
                indel = opt$indel,
                all.in = opt$allin,
                use.gurobi = opt$gurobi,
                epgap = opt$epgap)
})
